function [cA, cBI, cBE] = getBDFCoeff(fS)

tSpan  = fS.tSpan;
tOrder = fS.tOrder;
fLCBDF = fS.fLCBDF;
dt     = fS.dt;

t = zeros(1,tOrder+1);

for i = 0:tOrder
t(i+1) = tSpan(end-i);
end

%     r1 = tn/tnp1;
%     r2 = tnm1/tnp1;
%     r3 = tnm2/tnp1;
%     r4 = tnm3/tnp1;
%     r5 = tnm4/tnp1;

r1 = t(2)/t(1);
r2 = t(3)/t(1);
r3 = t(4)/t(1);
r4 = t(5)/t(1);

if fLCBDF == 0;
    
   
cA(1)=  (r2^2*r3^2*r4^2 - 2*r2^2*r3^2*r4 + r2^2*r3^2 - 2*r2^2*r3*r4^2 + 4*r2^2*r3*r4 - 2*r2^2*r3 + r2^2*r4^2 - 2*r2^2*r4 + r2^2 - 2*r2*r3^2*r4^2 + 4*r2*r3^2*r4 - 2*r2*r3^2 + 4*r2*r3*r4^2 - 8*r2*r3*r4 + 4*r2*r3 - 2*r2*r4^2 + 4*r2*r4 - 2*r2 + r3^2*r4^2 - 2*r3^2*r4 + r3^2 - 2*r3*r4^2 + 4*r3*r4 - 2*r3 + r4^2 - 2*r4 + 1)/((r1 - r2)*(r1 - r3)*(r1 - r4)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
cA(2)= -(r1^2*r3^2*r4^2 - 2*r1^2*r3^2*r4 + r1^2*r3^2 - 2*r1^2*r3*r4^2 + 4*r1^2*r3*r4 - 2*r1^2*r3 + r1^2*r4^2 - 2*r1^2*r4 + r1^2 - 2*r1*r3^2*r4^2 + 4*r1*r3^2*r4 - 2*r1*r3^2 + 4*r1*r3*r4^2 - 8*r1*r3*r4 + 4*r1*r3 - 2*r1*r4^2 + 4*r1*r4 - 2*r1 + r3^2*r4^2 - 2*r3^2*r4 + r3^2 - 2*r3*r4^2 + 4*r3*r4 - 2*r3 + r4^2 - 2*r4 + 1)/((r1 - r2)*(r2 - r3)*(r2 - r4)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
cA(3)=  (r1^2*r2^2*r4^2 - 2*r1^2*r2^2*r4 + r1^2*r2^2 - 2*r1^2*r2*r4^2 + 4*r1^2*r2*r4 - 2*r1^2*r2 + r1^2*r4^2 - 2*r1^2*r4 + r1^2 - 2*r1*r2^2*r4^2 + 4*r1*r2^2*r4 - 2*r1*r2^2 + 4*r1*r2*r4^2 - 8*r1*r2*r4 + 4*r1*r2 - 2*r1*r4^2 + 4*r1*r4 - 2*r1 + r2^2*r4^2 - 2*r2^2*r4 + r2^2 - 2*r2*r4^2 + 4*r2*r4 - 2*r2 + r4^2 - 2*r4 + 1)/((r3 - r4)*(r1*r2 - r1*r3 - r2*r3 + r3^2)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
cA(4)= -(r1^2*r2^2*r3^2 - 2*r1^2*r2^2*r3 + r1^2*r2^2 - 2*r1^2*r2*r3^2 + 4*r1^2*r2*r3 - 2*r1^2*r2 + r1^2*r3^2 - 2*r1^2*r3 + r1^2 - 2*r1*r2^2*r3^2 + 4*r1*r2^2*r3 - 2*r1*r2^2 + 4*r1*r2*r3^2 - 8*r1*r2*r3 + 4*r1*r2 - 2*r1*r3^2 + 4*r1*r3 - 2*r1 + r2^2*r3^2 - 2*r2^2*r3 + r2^2 - 2*r2*r3^2 + 4*r2*r3 - 2*r2 + r3^2 - 2*r3 + 1)/((r1*r4^2 + r2*r4^2 + r3*r4^2 - r4^3 + r1*r2*r3 - r1*r2*r4 - r1*r3*r4 - r2*r3*r4)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));

cBI= (r2 + r3 + r4 - r2*r3 - r2*r4 - r3*r4 + r2*r3*r4 - 1)/(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4);
 
cBE(1)= -(r2^2*r3^2*r4^2 - 2*r2^2*r3^2*r4 + r2^2*r3^2 - 2*r2^2*r3*r4^2 + 4*r2^2*r3*r4 - 2*r2^2*r3 + r2^2*r4^2 - 2*r2^2*r4 + r2^2 - 2*r2*r3^2*r4^2 + 4*r2*r3^2*r4 - 2*r2*r3^2 + 4*r2*r3*r4^2 - 8*r2*r3*r4 + 4*r2*r3 - 2*r2*r4^2 + 4*r2*r4 - 2*r2 + r3^2*r4^2 - 2*r3^2*r4 + r3^2 - 2*r3*r4^2 + 4*r3*r4 - 2*r3 + r4^2 - 2*r4 + 1)/((r1 - r2)*(r1 - r3)*(r1 - r4)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
cBE(2)= -(r1 + r2 + 2*r3 + 2*r4 - r3^2*r4^2 - r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 4*r3*r4 + r1*r3^2 + r1*r4^2 + r2*r3^2 + r2*r4^2 + 2*r3*r4^2 + 2*r3^2*r4 - r3^2 - r4^2 - r1*r2*r3^2 - r1*r2*r4^2 - 2*r1*r3*r4^2 - 2*r1*r3^2*r4 - 2*r2*r3*r4^2 - 2*r2*r3^2*r4 + r1*r3^2*r4^2 + r2*r3^2*r4^2 + 2*r1*r2*r3 + 2*r1*r2*r4 + 4*r1*r3*r4 + 4*r2*r3*r4 - 4*r1*r2*r3*r4 + 2*r1*r2*r3*r4^2 + 2*r1*r2*r3^2*r4 - r1*r2*r3^2*r4^2 - 1)/((r1 - r2)*(r2 - r3)*(r2 - r4)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
cBE(3)=  (r1 + 2*r2 + r3 + 2*r4 - r2^2*r4^2 - 2*r1*r2 - r1*r3 - 2*r1*r4 - 2*r2*r3 - 4*r2*r4 - 2*r3*r4 + r1*r2^2 + r1*r4^2 + r2^2*r3 + 2*r2*r4^2 + 2*r2^2*r4 + r3*r4^2 - r2^2 - r4^2 - r1*r2^2*r3 - 2*r1*r2*r4^2 - 2*r1*r2^2*r4 - r1*r3*r4^2 - 2*r2*r3*r4^2 - 2*r2^2*r3*r4 + r1*r2^2*r4^2 + r2^2*r3*r4^2 + 2*r1*r2*r3 + 4*r1*r2*r4 + 2*r1*r3*r4 + 4*r2*r3*r4 - 4*r1*r2*r3*r4 + 2*r1*r2*r3*r4^2 + 2*r1*r2^2*r3*r4 - r1*r2^2*r3*r4^2 - 1)/((r3 - r4)*(r1*r2 - r1*r3 - r2*r3 + r3^2)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
cBE(4)= -(r1 + 2*r2 + 2*r3 + r4 - r2^2*r3^2 - 2*r1*r2 - 2*r1*r3 - r1*r4 - 4*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2^2 + r1*r3^2 + 2*r2*r3^2 + 2*r2^2*r3 + r2^2*r4 + r3^2*r4 - r2^2 - r3^2 - 2*r1*r2*r3^2 - 2*r1*r2^2*r3 - r1*r2^2*r4 - r1*r3^2*r4 - 2*r2*r3^2*r4 - 2*r2^2*r3*r4 + r1*r2^2*r3^2 + r2^2*r3^2*r4 + 4*r1*r2*r3 + 2*r1*r2*r4 + 2*r1*r3*r4 + 4*r2*r3*r4 - 4*r1*r2*r3*r4 + 2*r1*r2*r3^2*r4 + 2*r1*r2^2*r3*r4 - r1*r2^2*r3^2*r4 - 1)/((r1*r4^2 + r2*r4^2 + r3*r4^2 - r4^3 + r1*r2*r3 - r1*r2*r4 - r1*r3*r4 - r2*r3*r4)*(3*r1 + 3*r2 + 3*r3 + 3*r4 - 2*r1*r2 - 2*r1*r3 - 2*r1*r4 - 2*r2*r3 - 2*r2*r4 - 2*r3*r4 + r1*r2*r3 + r1*r2*r4 + r1*r3*r4 + r2*r3*r4 - 4));
   
elseif fLCBDF == 1;
  
    
    
    
    
    
end

cBI = dt*cBI;
cBE = dt*cBE;





end